; ApiHook English language file by Proger_XP
; Language files must be encoded in UTF-8.
[Console]
;; help & tasks
help =
  {<-{x31}}
  {<{wi ApiHook basic help}}
  {<-{x31}}

  {yi Usage:}
    {wi ah.exe} [--option {i --...}] {yi l/a}  {wi <program/process> <script.oo/txt>}
    {wi ah.exe} [--option {i --...}] {yi s}    {wi <script.oo/txt>}
    {wi ah.exe} [--option {i --...}] {yi i/e}  {wi <program/process> <library.dll>}

  {yi Tasks:}
      {i (no)}     {15}Show basic help
    {gi h} {wi help}    {15}Show detailed help with options
      {wi version }   {15}Show program version
    {gi l} {wi launch}  {15}Start a program and hook it
    {gi a} {wi attach}  {15}Hook a running process
    {gi i} {wi inject}  {15}Start a program and inject an arbitrary DLL into it
    {gi e} {wi extend}  {15}Inject an arbitrary DLL into a running process
    {gi s} {wi self}    {15}{i Debug:} Attach the library to the loader itself

help details =
  {<-{x31}}
  {<{wi ApiHook detailed help}}
  {<-{x31}}

  {yi Arguments}

    {wi program/process}

      For {yi launch} this is the path to an {wi@b .exe} file to run and attach
      hooks to. For {yi attach} this is {wi process' ID} or {wi module name}.
      If no file with this name exists attempts to append {wi .exe} automatically.

    {wi script.oo/txt}

      ApiHook script file (usually with {wi@b .oo} extension) used to setup hooks.
      If {mi omitted} will search for {wi@b Script.oo}, {wi@b Script.txt} files
      in current directory (in this order). If this has {wi no extension} attempts
      to append {wi .oo}, {wi .txt} extensions.
      If {wi no file} with given name exists this argument is treated as
      inline script with several semicolon-separated {wi actions} in format:
  {<{wi@b ProcToHook} {wi action string}[; {i ...}]}

  {yi Options} {mi (default)}

    {wi --no-wait} & {wi --wait} & {mi --wait-on-error}
      Toggles waiting for {gi Enter} pressing before the program exits.

    {wi --show-exit-code={mi 1}}
      Toggles displaying non-zero exit code on program finish.

    {wi --console-cp={mi auto}}
      Switches console output to given {wi codepage}: {gi auto} (current CP), {gi utf8} (65001
      CP, requires a {wi Unicode} vector font like {wi Lucida Console}) or any {gi numeric}
      value (CP identifier). Old codepage is restored when {wi ApiHook} exists.

    {wi --utf8-warning={mi 1}}
      Toggles warning message appearing when a string being output contains
      {wi Unicode} symbols with code {wi > 127} that cannot be represented using
      default console raster fonts. Only appears on enabled {yi --utf8-output}.

    {wi --colors={mi 1}}
      Enables colors to be used in the console output.

    {wi --thread-safe=0/p/{mi 1}}
      Toggles usage of {wi critical sections} in both {wi ApiHook} loader and library.
      {gi 0} disables them which is the fastest option but will result in {ri crashes} for
      lots of concurrent calls (especially {wi ReadFile}/{wi CreateFile}). {gi p} enables
      per-hooked procedure safety whuch might not save you from all crashes.
      {gi 1} makes all actions run in single thread which is the slowest but most
      reliable way even for {wi ReadFile}.

    {wi --threads={mi 1}}
      {i Debug:} Eables {wi ApiHook} loader to use a thread to serve interprocess
      communication pipe between itself and the injected {wi ApiHook} library.

    {wi --logs=[+][#]file.log [,[+][#]second.log [,{i ...}]]} {mi -}
      Enables logging of all strings into given file. Unless starts with {gi +}
      the file is overwritten on each {wi ApiHook} run. One or more leading {wi #}
      decrease log verbosity ({wi #} = debug, {mi ##} = info, {wi ###} = user,
      {wi ####} = error). {wi Relative to current directory} (see also {yi --chdir}).
      Multiple logs can be separated with commas (without surrounding spaces).

      {r Not implemented.}

    {wi --lib-logs=[+][#|!|%]file.log [,{i ...}]} {mi -}
      Enables logging of {wi ApiHook} library messages to one or more comma-separated
      files. Unless a file name starts with {gi +} it's overwritten on each run.
      There can be 3 special prefixes: {gi #} controls verbosity (see {yi --log});
      {gi !} enables recording of named pipe communication errors; {gi %} enables through
      logging of all pipe commands and data being sent and received by the
      {wi ApiHook} library. {wi Relative to current directory} (see also {yi --chdir}).

      If {wi no prefix} is given file records core library messages of {wi ##} verbosity.
      By default logging is disabled after the library loads fine but is enabled
      otherwise - see {yi Library Logging} below for details.

      {wi {gi Dash} ({gi -})} or {wi empty value} turns library logging off.

    {wi --lib-verbose=d/{mi i}/u/e}
      Sets min message level to be sent from ApiHook {wi library} to {wi loader} via
      the named pipe. Note that setting this to {gi d} will generate heavy pipe I/O
      and might cause {ri Access violations}. See also {yi --verbose} that additionally
      filters all messages being output to the console.

    {wi --watch-interval={mi 500}}
      Refresh interval to check {yi --lib-logs} for new lines in milliseconds. Affects
      {yi --detach} and {gi w}atch.

    {wi --user-path={mi User}}
      Location of user files. This is used to save {wi dumped} and other
      script-related data. Path will be created if it doesn't exist.

    {wi --verbose=d/{mi i}/u/e}
      Controls how verbose console output is: {wi d}ebug, {wi i}nfo, {wi u}ser,
      {wi e}rror. See also {yi --lib-verbose}.

    {wi --log-time={mi h:nn}}
      If {gi not blank}, changes format of log message times appearing in the console
      output. If {gi blank}, removes time prefix from log messages altogether.
      {wi String format} is identical to that of {wi@b Delphi}'s {wi FormatDateTime}:
      {wi@g http://docwiki.embarcadero.com/Libraries/en/System.SysUtils.FormatDateTime}

    {wi --detach=1/w/{mi 0}}
      After hooks have been set up the loader ({wi ah.exe}) will exit unless this is
      {gi w} making it watch {yi --lib-logs} file displaying new entries on the console.

    {wi --lib={mi ApiHook.dll}}
      Path to the {wi ApiHook} core library being injected into the process.

    {wi --catalog={mi Catalog.ini}}
      Changes location of the API catalog file.

    {wi --extra-catalog={mi My.ini}}
      Changes location of the secondary API catalog file that is appended to
      {yi --catalog}. Convenient place for your own custom routines.

    {wi --consts={mi Constants.ini}}
      Changes location of the constants list file. If {wi {gi dash} ({gi -})} or
      {wi empty} disables it (consts can still be specified in the {wi API catalog}
      file (see {yi --catalog}) and script under {gi [Constants]} sections.

    {wi --define=const=value[,const=value[{i ...}]]}
      Defines extra constants (see also {yi --consts}) separated by commas;
      {wi values} follow usual type rules that work as if they were listed in
      a file (i.e. string {gi $FFFF} is a number in hexadecimal form).
      Double {gi ,,} doesn't start next const but is converted to regular {gi ,}.

    {wi --chdir={mi $}}
      Sets new working directory for {wi ApiHook} and its child processes.
      See also {yi --new-dir}. If starts with {gi $} refers to {wi ApiHook}'s root.

    {wi --new-dir={mi $}}
      {yi Launch only}: current directory to set for the newly launched process.
      This doesn't affect {wi ApiHook}'s startup CWD - it's set by {yi --chdir} but
      is relative it thus {gi .} or {gi ""} would refer to {yi --chdir}.
      If starts with {gi $} refers to the program's folder.

    {wi --cl="extra command line"} {mi ""}
      {yi Launch only}: command line for newly launched process; use quotes if it
      contains spaces.

    {wi --proc-flags=20}
      {yi Launch only}: custom {wi CreationFlags} (an integer) for the new process.
      {wi CREATE_SUSPENDED} ({wi 0x0004}) is always present.
      {wi CREATE_NEW_CONSOLE} ({wi 0x0010}) is set unless overriden.

    {wi --open-flags=1066}
      {yi Launch/inject}:
        Custom {wi DesiredAccess} for opening target process. {mi Defaults to}
        {wi PROCESS_QUERY_INFORMATION}, {wi PROCESS_CREATE_THREAD}, {wi PROCESS_VM_OPERATION},
        {wi PROCESS_VM_READ} and {wi PROCESS_VM_WRITE} ({wi 0x044A}).
      {yi Attach/extend}:
        Custom {wi DesiredAccess} for opening process' main thread. {mi Defaults to}
        {wi THREAD_QUERY_INFORMATION}, {wi THREAD_SUSPEND_RESUME} and {wi THREAD_TERMINATE}
        ({wi 0x0043}).

    {wi --suspend={mi 1}}
      If disabled, removes {wi CREATE_SUSPENDED} flag from {yi --open-flags}. Some
      applications do not start up properly or just terminate immediately after
      {wi ApiHook} runs - try starting them with this option disabled.

    {wi --debug-loader={mi 0}/1/r}
      {wi 1.} Outputs the memory address to which the loader code was written in
         target process (using {wi VirtualAllocEx});
      {wi 2?} If {yi --debug-loader} is {gi r} then target's main thread isn't suspended
         - useful if your debugger doesn't list processes that were
         suspended right from the start;
      {wi 3.} Waits for {gi Enter} before resuming the loader so that you can attach
         a debugger to its location and set a breakpoint;
      {wi 4.} Disables timeout for the loader thread to exit.

      Outputs loader thread {wi exit code} only if it has encountered an error.

    {wi --module=[library.dll|*]} {mi ""}
      Name of image ({wi EXE} or {wi DLL} file) to bind hooks to. If {gi empty} only
      reports main module's hits (the program EXE's), if {gi *} hooks all loaded
      modules including system like {wi kernel32.dll}. Otherwise is {gi image name part}
      like {wi kern}; first matching module is hooked.

  {yi Library Logging}

    {wi ApiHook} library and loader are communicating via a named pipe. Since DLLs
    have no means of directly outputting messages {wi ApiHook} library by default
    records its messages into a file named {wi@b ApiHook.dll.log} that is attempted
    to be created in one of the following locations in turn:
  {< {wi %TEMP%}   {wi %APPDATA%}   {wi \} (current disk root)   {wi C:\}   {wi D:\}}

    Logging can be altered after the {wi ApiHook} library and its loader have
    {wi successfully} established interprocess connection by using {yi --lib-log} loader
    option (see above). Until this happens {wi ApiHook} DLL will create a log file
    and record initialization messages there.

    Also, {wi ApiHook} library always logs all its messages including debug and pipe
    data using {wi OutputDebugString} API function - you can use {wi@b DebugView} to
    view them.

  {yi Known problems}

    {wi@r ReadFile hooks.} If your {wi script} sets up hooks on this function {wi Apihook}
    library might be crashing with {ri Access violations} at random times. If enabling
    {yi --thread-safe} doesn't fix this try using {yi --lib-logs} and {yi --detach} to
    disconnect the {wi library} from the {wi loader}. This will also help with {wi@r performance}.

    {ri Crashes} might also occur when using {yi --module=*} on a high-load process.

    This problem is usually due to {wi ReadFile} being actively used by the {wi library} in
    its interprocess communication with the {wi loader}.

    {wi@r Target process immediately closes.} By default {wi ApiHook} loader starts
    new process with {wi CREATE_SUSPENDED} flag. This makes some programs exit
    immediately after creation - for them try using {yi --suspend=0} option.

    {wi@r Nothing appears to operate.} When hooking functions with ANSI/Unicode variants
    (like {wi MessageBoxA}/{wi W}) by {wi prologue} be aware that default {yi --module=""} rules out
    calls not originating from the program itself. Thus if you hook {wi MessageBoxW}
    and the program calls {wi MessageBoxA} you will see no activity since {wi MessageBoxW}
    is called from within {wi user32.dll}.

    You can either hook {wi MessageBoxW} instead, hook both or use {yi --module=*} but be
    ready for excessive output from other libraries including system ones like
    {wi kernel32.dll} for widely used functions such as {wi CreateFileW}.

;; error messages
syserrormsg = ({ri #%d}) {wi %s}

error: wrong log level = Invalid {yi %s} value {wi %s}, expected on of these: {wi d}ebug, {wi i}nfo, {wi u}ser, {wi e}rror.
error: no --chdir = Cannot {wi --chdir} to {wi %s}, remaining in {wi %s}
error: CreateNamedPipe = Could not create a pipe named {wi %s} with {wi PipeMode} = {wi %.4X}: %s
error: invalid script arg = Script argument {wi %s} must be either an existing file name or a short inline script in format:{NL}{<{@wi ProcToHook} {wi action string}[; {i ...}]}
error: pipe loop leave timeout = Timeout of {wi %d sec} was reached while waiting for the communication pipe thread to exit - terminating it now.
error: pipe = {wi Pipe} communication error: %s

error: launch: no lib = ApiHook library not found: {wi %s}
error: launch: no exe = Program to launch not found: {wi %s}
error: launch: CreateProcess = {wi CreateProcess} (EXE = {wi %s}, CL = {wi %s}) has failed: %s
error: launch: wrong flag option = {wi --%s} is expected to be an integer, {wi %s} given.

error: attach: invalid id = Invalid process ID: {wi %s}
error: attach: cannot get thread = Cannot determine/open main thread of process {wi %d}.

error: attach: OpenProcess = {wi OpenProcess} has failed: %s
error: attach: VirtualAllocEx = Cannot {wi VirtualAllocEx} %d bytes: %s
error: attach: WriteProcessMemory = Cannot {wi WriteProcessMemory} %d bytes from loader's {wi %.8X} to target's {wi %.8X}: %s
error: attach: CreateRemoteThread = {wi CreateRemoteThread} has failed: %s
error: LoaderData init = Failed to initialize {wi LoaderData} with pointers to {wi kernel32.dll} functions.
error: attach: loader thread timeout = Loader remote thread is running longer than %d msec - terminating it. GetLastError = %s
error: attach: ResumeThread = {wi ResumeThread} on the loader remote thread has failed: %s

error: attach: thread exit: 701 = Loader remote thread has {ri failed} to load the {wi ApiHook} library.
error: attach: thread exit: 702 = Loader remote thread has reported that {wi ApiHook} library {ri could not} initialize or connect with host or loader processes.
error: attach: thread exit: other = Loader remote thread has {wi terminated} with exit code {ri %d}: %s

;; log messages
log = {%s %s}{i :} %s
log soon = {%s *} %s
log time = h:nn

log: lib version = Connected with ApiHook {wi library} {gi %s}; {wi loader} is {gi %s}.
log: --debug-loader = {yi Loader code} has been written at target's {wi %.8X}, {yi loader data} - at {wi %.8X}. Press {mi Enter} to resume the loader thread.
log: pipe is closing = {wi Communication pipe} is closing - detaching {wi loader} from the {wi library}.
log: console is closing = {wi ApiHook} loader's console window is closing - detaching the target process...

;; acknowledgements
ack: --chdir = Changed {wi working directory} to {wi@b %s}.
ack: --lib = Using ApiHook {wi library} {wi@b %s}.
ack: --new-dir = Changed {wi target's working directory} to {wi@b %s}.
ack: --lib-logs = Logging {wi library messages} to {wi@b %s}.
ack: --user-path = {wi User-generated files} are located in {wi@b %s}.
ack: --catalog = Using {wi API catalog} {wi@b %s}.
ack: --consts = Using {wi extra constants} defined in {wi@b %s}.
ack: script file = Using ApiHook {wi script file} {wi@b %s}.
ack: pipe connected = Connecting to the library using {wi named pipe} {wi@b %s}.

post action = >
  {NL}
  {wi@bi Initialization completed. What's now?{NL}}
    {wi {yi d}etach}        - close console window but leave the hook running{NL}
    {wi {yi t}erminate}     - close console, remove hooks and terminate the target app{NL}
    {wi {yi r}estore}       - close console, remove hooks but leave the target running{NL}
    {wi {yi k}eep console}  - remove hooks but keep console window and its messages{NL}
    {wi {yi w}atch}         - like {yi k} but will watch {yi --lib-logs} file for new lines{NL}
    {wi {ci s}cript}        - reload script file (only if you've ran {wi ApiHook} with one){NL}
  {gi Ctrl+C} acts as {wi {yi d}etach}.{NL}
  {yi Your choice...}{NL}

post action repeat = {gi >} {wi {yi D}etach}, {wi {yi t}erminate}, {wi {yi r}estore}, {wi {yi k}eep}, {wi {yi w}atch} or {wi {ci s}cript}? {gi >}
post action: self = Press {gi Enter} to stop {wi ApiHook}...{SP}
post action: script reloaded = {wi Realoaded {ci s}cript} from {wi %s}.
post action: watch = Watching {wi %s} ({wi %d bytes} now) each {wi %d msec}. Press {gi Ctrl+C} to exit.{NL}
post action: no watch log = No {ri --lib-logs} option given - required for {wi {gi w}atch} task.
post action: watch shrunk = Log file has {yi shunk} by {wi %d bytes} (to {wi %d}) - starting over.{NL}
post action: watch tong tail = There are {yi %d extra more bytes} - not showing them here.{NL}
